ktor {
    deployment {
        // Port to listen on
        port = 8080
        port = ${?PORT}

        // Netty settings
        // Accommodate very slow clients when serving large files
        responseWriteTimeoutSeconds = 86400
    }

    // Ktor application module; do not change
    application {
        modules = [
            dev.kdrag0n.patreondl.ApplicationKt.module
        ]
    }
}

app {
    // Implementation detail: should refer to this file
    configPath = "config.conf"
}

web {
    // Public URL to server root
    baseUrl = "http://localhost:8080"
    // List of domains that are allowed to download exclusive content via CORS
    corsAllowed = [ protonaosp.kdrag0n.dev ]

    // Keys used to encrypt and authenticate user sessions and grants.
    // Changing these will invalidate existing sessions and grants.
    // To generate: python -c 'import secrets; print(secrets.token_hex(32))'
    // MAKE SURE YOU CHANGE THESE KEYS FOR SECURITY!
    sessionEncryptKey = "72a68232fb004176c5ba2cdd496cc3616a9cb275af726d0393981a2c7d47b35e"
    sessionAuthKey = "57c0fc8897bd48d4eedd1e1b8aa30d099de71e700b399d6a4b27db5b3be7ec7b"
    grantKey = "d6726d62a27a428d168a7b9d43d8fd884f99dbae964d6789c9ec9ccc69e4cf6e"

    // Whether to enforce HTTPS for cookies and CORS
    // Recommended for production deployments
    httpsOnly = false

    // Whether to use X-Forwarded-* headers
    // Must be enabled to work correctly behind a reverse proxy
    // Must NOT be enabled otherwise to avoid security issues
    forwardedHeaders = false
}

content {
    // User-facing index of links to exclusive downloads
    benefitIndexUrl = "https://example.com/"

    // Local path to exclusive content
    exclusiveSrc = "/var/www/patreon/exclusive"
    // Fully-qualified class name for the exclusive content filter
    exclusiveFilter = "dev.kdrag0n.patreondl.content.filters.PassthroughFilter"
    // Local path to static content - authwalled, but not sensitive
    staticSrc = "/var/www/patreon/static"
}

payments {
    // Redirect URL for successful payments
    successUrl = "https://example.com/"
    // Default price for products, in cents
    defaultPriceCents = 600

    // Whether to adjust for Purchasing Power Parity (PPP)
    usePriceParity = true
    // Minimum adjusted price, in cents
    minPriceCents = 100
}

// PostgreSQL database
database {
    host = "127.0.0.1"
    port = 5432

    database = "patreondl"
    username = "patreondl"
    password = "patreondl!"
}

external {
    // Patreon integration
    patreon {
        // Patreon OAuth secrets from https://www.patreon.com/portal/registration/register-clients
        clientId = "c5Ym3h84rahixzA62pPOicwaIkJ82tNcbMWlt7RlC0h5vOqmFC9XtcPrDg2ZAwFg"
        clientSecret = "akVd_4wULgQ7wkMKpwlEs0Gu0sYexXa6akIgHfAgJDnwHAcHBkQO9n37N86t4_pa"

        // Creator's user info for users to pledge to
        creatorName = "Example"
        creatorId = "12345678"

        // Minimum amount of the pledge tier that offers download benefits, in cents
        // This is from the creator's perspective, not the patron, so currency conversion is not applied
        minTierAmount = 600
        // Key for Patreon API webhooks
        // Webhook path = /_webhooks/patreon/$webhookKey
        // MAKE SURE YOU CHANGE THIS FOR SECURITY!
        webhookKey = "2f8206f2bbc2fe83342d869896c99a633b16f6bef7f140c9f6ba39680388f5a4c4c44451435c42721b0ede0500c8245c333ae3dfe8f8465341d1a8ad96d90438"
    }

    // Stripe payment integration
    stripe {
        // Publishable key
        publicKey = "pk_live_xBauNvtW2V3GVpMAmdiKHqJyZ6togvqwAKgXNfbOg0Vp9QJUUGicJmLDVPms2VwuH6TmfzfFnI9537L43IwJJ9NHNATN7NSE2nm"
        // Secret key
        secretKey = "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"

        // Webhook signing secret
        webhookSecret = "whsec_CIUq10aqTf2v9CqdU5kz3PHwpmf5vWu6"
        // Webhook path = /_webhooks/stripe/$webhookKey
        // MAKE SURE YOU CHANGE THIS FOR SECURITY!
        webhookKey = "df66b3ad4231af7b4dce6d106277bf42ca6d44dbb711aaaf67249a3f7699d6d8823398a5b918476a788fa2fe2ababc139a82d65a8bf27bf2f94cb49ce3ec7c2d"
    }

    // Telegram integration
    telegram {
        // Token from @BotFather
        botToken = "1234567890:hXk77gf4Zy0sL5i03L9U4qspq5ufwQFuFbH"
        // Private group to invite patrons to, with -100 prefix for Bot API
        groupId = -1001234567890
        // User ID of the bot owner
        ownerId = 123456789
    }

    // Sentry error reporting (optional)
    sentry {
        dsn = "https://736d24a4995b1331831deedb2a9c48fc@o123456.ingest.sentry.io/1234567"
    }

    // MaxMind GeoIP database; GeoLite2 country is enough
    // Only required if payments.usePriceParity = true
    maxmind {
        databasePath = "GeoLite2-Country_20210525/GeoLite2-Country.mmdb"
    }

    // SendGrid email integration
    email {
        // SendGrid API key
        apiKey = "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"
        // Email address to send messages from
        fromAddress = "patreon-benefits@example.com"

        // Email templates
        messageTemplates {
            telegramWelcome = """Hello [FIRST_NAME],

Get your rewards for pledging on Patreon:

Downloads: [BENEFIT_INDEX_URL]
Telegram: [TELEGRAM_INVITE]"""

            singlePurchaseSuccessful = """Hello,

You can now download [PRODUCT_NAME]: [DOWNLOAD_URLS]"""

            multiPurchaseSuccessful = """Hello,

You can now download [PRODUCT_NAME]:
    â€¢ [DOWNLOAD_URLS]"""
        }
    }
}