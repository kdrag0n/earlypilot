ktor {
    deployment {
        // Port to listen on
        port = 8080
        port = ${?PORT}

        // Netty settings
        // Accommodate very slow clients when serving large files
        responseWriteTimeoutSeconds = 86400
    }

    // Ktor application module; do not change
    application {
        modules = [ dev.kdrag0n.patreondl.ApplicationKt.module ]
    }
}

patreon {
    // Patreon OAuth secrets from https://www.patreon.com/portal/registration/register-clients
    clientId = "bl1SFGo9ALAW1YWCCoTVtMx4ZTrZHLzxINDlKpyHs2E2T9eacUSwLWBOVcchnAFu"
    clientSecret = "Auz2_j7TRSNW7GBZ7Pf8d2ccVgcfIro1YY19Y9k1OglEztLjo15ddFkFwXvwF_dw"

    // Creator's user info for users to pledge to
    creatorName = "Example"
    creatorId = "12345678"

    // Minimum amount of the pledge tier that offers download benefits, in cents
    // This is from the creator's perspective, not the patron, so currency conversion is not applied
    minTierAmount = 600
}

web {
    // User-facing index of URLs to exclusive downloads
    benefitIndexUrl = "https://example.com/patreon/"
    // List of domains that are allowed to download exclusive content via CORS
    corsAllowed = [ installer.example.com ]

    // Local storage location for exclusive content
    exclusiveSrc = "/var/www/patreon/exclusive"
    // Local storage location for static content that requires authentication but is not considered exclusive
    staticSrc = "/var/www/patreon/static"
    // Fully-qualified class name for the exclusive content filter
    contentFilter = "dev.kdrag0n.patreondl.content.filters.ContentFilter"

    // Whether to enforce HTTPS for cookies and CORS
    // Recommended for production deployments
    httpsOnly = true

    // Whether to use X-Forwarded-* headers
    // Must be enabled to work correctly behind a reverse proxy
    // Must NOT be enabled otherwise to avoid security issues
    forwardedHeaders = false

    // Keys used to encrypt and authenticate user sessions and grants.
    // Changing these will invalidate existing sessions and grants.
    // To generate one: python -c 'import secrets; print(secrets.token_hex(32))'
    // MAKE SURE YOU CHANGE THESE KEYS FOR SECURITY!
    sessionEncryptKey = "72a68232fb004176c5ba2cdd496cc3616a9cb275af726d0393981a2c7d47b35e"
    sessionAuthKey = "57c0fc8897bd48d4eedd1e1b8aa30d099de71e700b399d6a4b27db5b3be7ec7b"
    grantKey = "d6726d62a27a428d168a7b9d43d8fd884f99dbae964d6789c9ec9ccc69e4cf6e"
}